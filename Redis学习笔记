纯redis操作:
【redis数据结构 – 简介】
nosql, 形式接近于python的diction
redis是一种高级的key:value存储系统，其中value支持五种数据类型：

1.字符串（strings）
2.字符串列表（lists）
3.字符串集合（sets）
4.有序字符串集合（sorted sets）
5.哈希（hashes）
不需要声明类型，对于一个key，给他赋予的value是什么他就是什么类型，不同类型之间不能相互转换
而关于key，有几个点要提醒大家：

1.key不要太长，尽量不要超过1024字节，这不仅消耗内存，而且会降低查找的效率；
2.key也不要太短，太短的话，key的可读性会降低；
3.在一个项目中，key最好使用统一的命名模式，例如user:10000:passwd。

【redis数据结构 – strings】
字符串类型可以进行数值操作，在遇到数值操作时，redis会将字符串类型转换成数值：
  127.0.0.1:6379> set mynum "2"
  OK
  127.0.0.1:6379> get mynum
  "2"
  127.0.0.1:6379> incr mynum
  (integer) 3
  127.0.0.1:6379> get mynum
  "3"
INCR等指令本身就具有原子操作的特性，可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现“原子计数”的效果：
假如，在某种场景下有3个客户端同时读取了mynum的值（值为2），然后对其同时进行了加1的操作，那么，最后mynum的值一定是5。用redis的这个特性实现业务上的统计计数需求。

【redis数据结构 – lists】

redis的另一个重要的数据结构叫做lists，翻译成中文叫做“列表”。
//在mylist左侧插入元素"0"
127.0.0.1:6379> lpush mylist "0"  #返回值是list长度
(integer) 3
//列出mylist中从编号0到编号1的元素
127.0.0.1:6379> lrange mylist 0 1
1) "0"
2) "1"
redis中的lists在底层实现上并不是数组，而是链表，也就是说对于一个具有上百万个元素的lists来说，在头部和尾部插入一个新元素，其时间复杂度是常数级别的，
比如用LPUSH在10个元素的lists头部插入新元素，和在上千万元素的lists头部插入新元素的速度应该是相同的。
虽然lists有这样的优势，但同样有其弊端，那就是，链表型lists的元素定位会比较慢，而数组型lists的元素定位就会快得多。

lists的常用操作包括LPUSH、RPUSH、LRANGE等。我们可以用LPUSH在lists的左侧插入一个新元素，用RPUSH在lists的右侧插入一个新元素，
用LRANGE命令从lists中指定一个范围来提取元素。
可以利用lists来实现一个消息队列，而且可以确保先后顺序，不必像MySQL那样还需要通过ORDER BY来进行排序
#range中，负数 表示倒数
#不能用get的方法来获得list的内容
#不能类型转换，一个key如果被赋值为字符串，就不能对他做list操作

【redis数据结构 – 集合】

redis的集合，是一种无序的集合，集合中的元素没有先后顺序。
集合相关的操作也很丰富，如添加新元素、删除已有元素、取交集、取并集、取差集等。我们来看例子：
复制代码 代码如下:

//向集合myset中加入一个新元素"one"
127.0.0.1:6379> sadd myset "one"  #返回值是这句sadd操作插入成功的元素数
(integer) 1
//列出集合myset中的所有元素
127.0.0.1:6379> smembers myset
1) "one"
2) "two"
//判断元素1是否在集合myset中，返回1表示存在，返回0表示不存在
127.0.0.1:6379> sismember myset "one"
(integer) 1
//新建一个新的集合yourset
127.0.0.1:6379> sadd yourset "1"
(integer) 1
127.0.0.1:6379> sadd yourset "2"
(integer) 1
127.0.0.1:6379> smembers yourset
1) "1"
2) "2"
//对两个集合求并集
127.0.0.1:6379> sunion myset yourset
1) "1"
2) "one"
3) "2"
4) "two"

 

对于集合的使用，也有一些常见的方式，比如，QQ有一个社交功能叫做“好友标签”，大家可以给你的好友贴标签，比如“大美女”、“土豪”、“欧巴”等等，
这时就可以使用redis的集合来实现，把每一个用户的标签都存储在一个集合之中。


===============================================================================================================================
python&&redis

import redis

 r = redis.StrictRedis(host='192.168.1.103', port=6379, db='0')#建立连接

 result = r.set('name', 'shouke')  # 存储键-值

 print('result of set: %s' % result) #返回值为true or false
 
 keys = r.keys()  # 获取所有键

print('keys: %s' % keys) 
